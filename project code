#Import summary Virgo data
virgo_tax <-read.table("/Users/marenhunsberger/Desktop/MSc thesis data/Output/summary.Abundance.txt", header = T, row.names = 1) # this is the file that has only Genus and species 
head(virgo_tax)

#Now add taxonomy, as this file only has Genus and Species
names(virgo_tax) <- gsub('\\.', '', names(virgo_tax) )

Genus <- sub("\\_.*", "", names(virgo_tax))
Genus

Species <- names(virgo_tax)
Species

taxatable <- as.data.frame(Genus, Species)
taxatable$Species <- rownames(taxatable)

View(taxatable)

write.csv(taxatable, "virgo_tax.csv")  

# Import Metaphlan and use the taxonomy in there to obtain higher levels than the only species 
meta_tax <-read.csv("/Users/marenhunsberger/Desktop/MSc thesis data/Output/tax_for_virgo.csv") 
head(meta_tax) 

# merge Species
dim(taxatable) #231   2
dim(meta_tax) #137   7

full_tax_table <- merge(taxatable, meta_tax , by= "Species", all.x = TRUE)
dim(full_tax_table) # 231 8
View(full_tax_table) # this will have 2 genus columns to get checked 

tax_almostthere <- read.csv("/Users/marenhunsberger/Desktop/MSc thesis data/Output/tax_for_virgo.csv")
head(tax_almostthere)

virgo <- virgo_tax
dim(virgo)
head(virgo)

virgo <- virgo_tax
dim(virgo)
head(virgo)

# remove the . from the column names
isUnique(virgo$Sample_ID)
virgo.transpose <- t(virgo)
write.csv(virgo.transpose, "/Users/marenhunsberger/Desktop/MSc thesis data/Output/virgo_transpose.csv")

head(virgo.transpose)

metadata <- read.csv("/Users/marenhunsberger/Desktop/MSc thesis data/Output/Metadata.csv")
head(metadata)
# replace - with _ in reads_ID
metadata$reads_ID <- gsub('-', '_', metadata$reads_ID)
head(metadata)

rownames(metadata) <- metadata$reads_ID

class(virgo.transpose)
head(virgo.transpose)

class(tax_almostthere)
head(tax_almostthere)
rownames(tax_almostthere) <- tax_almostthere$Species

virgo.tax <- as.matrix(tax_almostthere)
head(virgo.tax)

OTU = otu_table(virgo.transpose, taxa_are_rows = TRUE)
TAX = tax_table(virgo.tax)
SAMPLEDATA = sample_data(MetaMetaboliteFINAL)

phyloseqin.species <- phyloseq(OTU, TAX, SAMPLEDATA)
phyloseqin.species

#phyloseq-class experiment-level object
#otu_table()   OTU Table:         [ 210 taxa and 89 samples ]
#sample_data() Sample Data:       [ 89 samples by 70 sample variables ]
#tax_table()   Taxonomy Table:    [ 210 taxa by 7 taxonomic ranks ]

#convert phyloseq object to table for future analyses
phylo_TABLE <- psmelt(phyloseqin.species)

# add the tree!
# tree available here https://github.com/biobakery/MetaPhlAn/tree/master/metaphlan/utils -- this will be the latest version available
library(ape)
tree <- read.tree("/Users/marenhunsberger/Desktop/MSc thesis data/Output/mpa_v30_CHOCOPhlAn_201901_species_tree.nwk.txt") # we need to generate the tree with Phylopan #https://github.com/biobakery/phylophlan/wiki
tree

phyloseqin.species.tree <- phyloseqin.species  # Relative abundance object with 137 taxa 

# edit labels of tree  
tree$tip.label <- gsub("[a-z]__", "", tree$tip.label) # from function below this is the simplify part # from function below this is the simplify part 
tree
taxa_names(phyloseqin.species)

phy_tree(phyloseqin.species.tree) <- tree
phyloseqin.species.tree

#phyloseq-class experiment-level object
#otu_table()   OTU Table:         [ 184 taxa and 89 samples ]
#sample_data() Sample Data:       [ 89 samples by 70 sample variables ]
#tax_table()   Taxonomy Table:    [ 184 taxa by 7 taxonomic ranks ]
#phy_tree()    Phylogenetic Tree: [ 184 tips and 183 internal nodes ]

#plot the tree according to Risk status and outcome: 
library(ggplot2)
plot_tree(phyloseqin.species.tree, 
        color = "outcome",
        shape = "Risk",
        justify = "yes please", 
        label.tips = "Species",
        base.spacing=0.03,
        ladderize = "left") +
  scale_size_continuous(range = c(1, 3))

#Create relative abundance phyloseq object
phylo_rel  = transform_sample_counts(phyloseqin.species, function(x) x / sum(x) )
#convert phyloseq object to table for future analyses
phylo_relTABLE <- psmelt(phylo_rel)

#plot relative abundance heatmap
plot_heatmap(phylo_rel,  sample.label="SampleID", title = 'Relative abundance data - NMDS - Bray', 
             taxa.label='Species', max.label = 250, method = "NMDS", distance = "bray")

#Subset out the metadata and virgo data into term, ptb, high and low risk, 
#and make a phyloseq object for each of these groups

PTBmeta <- subset.data.frame(MetaMetaboliteFINAL, subset = outcome=="PTB")
TERMmeta <- subset.data.frame(MetaMetaboliteFINAL, subset = outcome=="TERM")
LOWmeta <- subset.data.frame(MetaMetaboliteFINAL, subset = Risk=="Low risk")
HIGHmeta <- subset.data.frame(MetaMetaboliteFINAL, subset = Risk=="High risk")

####################################################################################
#                    Divide Samples into CST Groups                                #
####################################################################################

#Write a function that will find the top X most abundant species in each sample
#modified slightly from: https://github.com/joey711/phyloseq/issues/848

# function to find the most abundant taxa
# Goes through a phyloseq object, picks out the most abundant taxa and gives the abundance for each
# and identifies which taxa is most abundant for which sample
# 
find.top.taxa <- function(x,taxa){
  require(phyloseq)
  require(magrittr)
  top.taxa <- tax_glom(x, taxa)
  otu <- otu_table(t(top.taxa))
  if (taxa_are_rows(otu)){
    otu <- t(otu)
  }
  tax <- tax_table(top.taxa)
  j<-apply(otu,1,which.max)
  k <- j[!duplicated(j)]
  l <- data.frame(tax[k,])
  m <- data.frame(otu[,k])
  colnames(m) = l[,taxa]
  n <- colnames(m)[apply(m,1,which.max)]
  m[,taxa] <- n
  return(m)
}
find.top.taxa(top.pdy,"Species")


find.top.taxa2 <- function(x,taxa,num){
  (phyloseq)
  require(magrittr)
  
  top.taxa <- tax_glom(x, taxa)
  otu <- otu_table(top.taxa) # remove the transformation if using a merge_sample object
  tax <- tax_table(top.taxa)
  j1 <- apply(otu,1,sort,index.return=T, decreasing=T) # modifying which.max to return a list of sorted index
  j2 <- lapply(j1,'[[',"ix") # select for index
  l <- data.frame(unique(tax@.Data[unlist(j2),]))
  m <- data.frame(otu@.Data[,unique(unlist(j2))])
  colnames(m) = l[,taxa]
  n <- apply(m,1,sort,index.return=T, decreasing=T) %>%
    lapply('[[',"ix") %>%  # Extract index
    lapply(head,n=num) # This to returns the top x tax
  # I want to apply a list of list of index to obtains a list of list of translated names
  # https://stackoverflow.com/questions/31561238/lapply-function-loops-on-list-of-lists-r
  p <- list()
  for(i in 1:length(n)){
    p[[i]]<- colnames(m)[n[[i]]]
  }
  m$taxa <- p # replacing [,taxa], but now the new column is called "taxa" instead of the inputted taxonomic rank
  return(m)
}

#Perform the function to find top species in each sample
topSpeciesbySample <- find.top.taxa(phylo_rel,"Species")

#Now return sample names dominated by Lactobacillus crispatus

##Find and assign groups from the filtered top 10 most abundant species (L. iners, L. crispatus, 
#G. vaginalis, L. jensenii, A. vaginae, L. gasseri, BVAB1, B. breve, B. dentium, L. helveticus)
groupI<-which(topSpeciesbySample$Species=="Gardnerella_vaginalis")
groupI<-topSpeciesbySample[groupI,]
groupII<-which(topSpeciesbySample$Species=="Lactobacillus_crispatus")
groupII<-topSpeciesbySample[groupII,]
groupIII<-which(topSpeciesbySample$Species=="Lactobacillus_iners")
groupIII<-topSpeciesbySample[groupIII,]
groupIV<-which(topSpeciesbySample$Species=="Lactobacillus_jensenii")
groupIV<-topSpeciesbySample[groupIV,]
groupIV.1<-which(topSpeciesbySample$Species=="Lactobacillus_helveticus")
groupIV.1<-topSpeciesbySample[groupIV.1,]
groupIV.2<-which(topSpeciesbySample$Species=="Lactobacillus_johnsonii")
groupIV.2<-topSpeciesbySample[groupIV.2,]
groupIV.3<-which(topSpeciesbySample$Species=="Lactobacillus_gasseri")
groupIV <- rbind(groupIV, groupIV.3, groupIV.2, groupIV.1)
groupV<- which(topSpeciesbySample$Species=="BVAB1")
groupV<-topSpeciesbySample[groupV,]
groupV.1<- which(topSpeciesbySample$Species=="Bifidobacterium_breve")
groupV.1<-topSpeciesbySample[groupV.1,]
groupV.2<- which(topSpeciesbySample$Species=="Bifidobacterium_dentium")
groupV.2<-topSpeciesbySample[groupV.2,]
groupV.3<- which(topSpeciesbySample$Species=="Escherichia_coli")
groupV.3<-topSpeciesbySample[groupV.3,]
groupV.4<- which(topSpeciesbySample$Species=="Atopobium_vaginae")
groupV.4<-topSpeciesbySample[groupV.4,]
groupV <- rbind(groupV, groupV.1, groupV.2, groupV.3, groupV.4)

#add Group to metadata dataframe
Group <- rbind(groupI, groupII, groupIII, groupIV, groupV) #add all groups together
Groupings <- subset(Group, select = "Species") #create dataframe of just sample name and most abundant species
Groupings$Species <- gsub("GroupI", "Gardnerella_vaginalis", Groupings$Species) #sub species name with Group ID
Groupings$Species <- gsub("Gardnerella_vaginalis", "GroupI", Groupings$Species)
Groupings$Species <- gsub("Lactobacillus_crispatus", "GroupII", Groupings$Species)
Groupings$Species <- gsub("Lactobacillus_iners", "GroupIII", Groupings$Species)
Groupings$Species <- gsub("Lactobacillus_jensenii", "GroupIV", Groupings$Species)
Groupings$Species <- gsub("Lactobacillus_gasseri", "GroupIV", Groupings$Species)
Groupings$Species <- gsub("Lactobacillus_johnsonii", "GroupIV", Groupings$Species)
Groupings$Species <- gsub("Lactobacillus_helveticus", "GroupIV", Groupings$Species)
Groupings$Species <- gsub("BVAB1", "GroupV", Groupings$Species)
Groupings$Species <- gsub("Bifidobacterium_breve", "GroupV", Groupings$Species)
Groupings$Species <- gsub("Bifidobacterium_dentium", "GroupV", Groupings$Species)
Groupings$Species <- gsub("Escherichia_coli", "GroupV", Groupings$Species)
Groupings$Species <- gsub("Atopobium_vaginae", "GroupV", Groupings$Species)
#make samples in Groupings in the same order as in metadata
Groupings <- Groupings[match(rownames(MetaMetaboliteFINAL), rownames(Groupings)), ]
#add Groupings column to metadata
MetaMetaboliteFINAL <- cbind(MetaMetaboliteFINAL, Groupings)
MetaMetaboliteFINAL <- MetaMetaboliteFINAL %>% relocate(Groupings)

#At this point we now need to remake our phyloseq objects with the updated metadata file, 
#so go back and do that before continuing

G1meta <- subset.data.frame(MetaMetabolite, subset = Groupings=="GroupI")
G2meta <- subset.data.frame(MetaMetabolite, subset = Groupings=="GroupII")
G3meta <- subset.data.frame(MetaMetabolite, subset = Groupings=="GroupIII")
G4meta <- subset.data.frame(MetaMetabolite, subset = Groupings=="GroupIV")
G5meta <- subset.data.frame(MetaMetabolite, subset = Groupings=="GroupV") 

highSamples <- rownames(HIGHmeta)
virgoHIGH <- subset(virgo.transpose, select=c(highSamples))
lowSamples <- rownames(LOWmeta)
virgoLOW <- subset(virgo.transpose, select=c(lowSamples))
TERMsamples <- rownames(TERMmeta)
PTBsamples <- rownames(PTBmeta)
virgoPTB <- subset(virgo.transpose, select=c(PTBsamples))
virgoTERM <- subset(virgo.transpose, select=c(TERMsamples))

hOTU = otu_table(virgoHIGH, taxa_are_rows = TRUE)
hTAX = tax_table(virgo.tax)
hSAMPLEDATA = sample_data(HIGHmeta)
HIGHphyloseqin.species <- phyloseq(hOTU, hTAX, hSAMPLEDATA)

lOTU = otu_table(virgoLOW, taxa_are_rows = TRUE)
lTAX = tax_table(virgo.tax)
lSAMPLEDATA = sample_data(LOWmeta)
LOWphyloseqin.species <- phyloseq(lOTU, lTAX, lSAMPLEDATA)

ptbOTU = otu_table(virgoPTB, taxa_are_rows = TRUE)
ptbTAX = tax_table(virgo.tax)
ptbSAMPLEDATA = sample_data(PTBmeta)
PTBphyloseqin.species <- phyloseq(ptbOTU, ptbTAX, ptbSAMPLEDATA)

termOTU = otu_table(virgoTERM, taxa_are_rows = TRUE)
termTAX = tax_table(virgo.tax)
termSAMPLEDATA = sample_data(TERMmeta)
TERMphyloseqin.species <- phyloseq(termOTU, termTAX, termSAMPLEDATA)
 
GIphyloseq <- subset_samples(phylo_rel, Groupings=="GroupI")
GIIphyloseq <- subset_samples(phylo_rel, Groupings=="GroupII")
GIIIphyloseq <- subset_samples(phylo_rel, Groupings=="GroupIII")
GIVphyloseq <- subset_samples(phylo_rel, Groupings=="GroupIV")
GVphyloseq <- subset_samples(phylo_rel, Groupings=="GroupV")

#make relative abundance phlyseq objects for each of these groups too
relTERMphyloseqin.species  = transform_sample_counts(TERMphyloseqin.species, function(x) x / sum(x) )
relPTBphyloseqin.species  = transform_sample_counts(PTBphyloseqin.species, function(x) x / sum(x) )
relHIGHphyloseqin.species  = transform_sample_counts(HIGHphyloseqin.species, function(x) x / sum(x) )
relLOWphyloseqin.species  = transform_sample_counts(LOWphyloseqin.species, function(x) x / sum(x) )

#########################################################################################################
#         Find and plot the top 20 most abundant species for all samples, plus 4 subset groups          #
#########################################################################################################
#install fantaxtic package from https://rdrr.io/github/gmteunisse/Fantaxtic/man/get_top_taxa.html
#then use get_top_taxa function

#top taxa by relative abd for each outcome 
Top20rel <- get_top_taxa(phylo_rel, 
                             20, #how many top taxa you want returned
                             relative = FALSE, #select taxa based on relative abundance?
                             discard_other = FALSE, #discard remaining taxa?
                             other_label = "Other") #what to call collapsed non-top taxa
Top20Table <- psmelt(Top20rel)

TERMTop20rel <- get_top_taxa(relTERMphyloseqin.species, 
             20, #how many top taxa you want returned
             relative = FALSE, #select taxa based on relative abundance?
             discard_other = FALSE, #discard remaining taxa?
             other_label = "Other") #what to call collapsed non-top taxa
TERMTop20Table <- psmelt(TERMTop20rel)

PTBTop20rel <- get_top_taxa(relPTBphyloseqin.species, 
             20, #how many top taxa you want returned
             relative = FALSE, #select taxa based on relative abundance?
             discard_other = FALSE, #discard remaining taxa?
             other_label = "Other") #what to call collapsed non-top taxa
PTBTop20Table <- psmelt(PTBTop20rel)

lowTop20rel <- get_top_taxa(relLOWphyloseqin.species, 
                            20, #how many top taxa you want returned
                            relative = FALSE, #select taxa based on relative abundance?
                            discard_other = FALSE, #discard remaining taxa?
                            other_label = "Other") #what to call collapsed non-top taxa
LowTop20Table <- psmelt(lowTop20rel)

highTop20rel <- get_top_taxa(relHIGHphyloseqin.species, 
                            20, #how many top taxa you want returned
                            relative = FALSE, #select taxa based on relative abundance?
                            discard_other = FALSE, #discard remaining taxa?
                            other_label = "Other") #what to call collapsed non-top taxa
highTop20Table <- psmelt(highTop20rel)

#top taxa by relative abd for each group
G1top20 <- get_top_taxa(GIphyloseq, 
                             20, #how many top taxa you want returned
                             relative = FALSE, #select taxa based on relative abundance?
                             discard_other = FALSE, #discard remaining taxa?
                             other_label = "Other") #what to call collapsed non-top taxa
G1top20Table <- psmelt(G1top20 )  

G2top20 <- get_top_taxa(GIIphyloseq, 
                        20, #how many top taxa you want returned
                        relative = FALSE, #select taxa based on relative abundance?
                        discard_other = FALSE, #discard remaining taxa?
                        other_label = "Other") #what to call collapsed non-top taxa
G2top20Table <- psmelt(G2top20 )  

G3top20 <- get_top_taxa(GIIIphyloseq, 
                        20, #how many top taxa you want returned
                        relative = FALSE, #select taxa based on relative abundance?
                        discard_other = FALSE, #discard remaining taxa?
                        other_label = "Other") #what to call collapsed non-top taxa
G3top20Table <- psmelt(G3top20 ) 

G4top20 <- get_top_taxa(GIVphyloseq, 
                        20, #how many top taxa you want returned
                        relative = FALSE, #select taxa based on relative abundance?
                        discard_other = FALSE, #discard remaining taxa?
                        other_label = "Other") #what to call collapsed non-top taxa
G4top20Table <- psmelt(G4top20 )  

G5top20 <- get_top_taxa(GVphyloseq, 
                        20, #how many top taxa you want returned
                        relative = FALSE, #select taxa based on relative abundance?
                        discard_other = FALSE, #discard remaining taxa?
                        other_label = "Other") #what to call collapsed non-top taxa
G5top20Table <- psmelt(G5top20 )  

#plot top 20s
#For All (Absolute):
most_abundant_number <-20
topN =  most_abundant_number
most_abundant_taxa = sort(taxa_sums(phyloseqin.species), TRUE)[1:topN]
most_abundant_taxa #lets you see the top 20 most abundant species by
                   #absolute abundance, in descending order

GP = prune_taxa(names(most_abundant_taxa), phyloseqin.species)
mGPr <- psmelt(GP)

#For all (relative)
most_abundant_number <-20
topN =  most_abundant_number
most_abundant_taxa = sort(taxa_sums(phylo_rel), TRUE)[1:topN]
most_abundant_taxa #lets you see the top 20 most abundant species by
#absolute abundance, in descending order

relGP = prune_taxa(names(most_abundant_taxa), phylo_rel)
relmGPr <- psmelt(relGP)

#For relative abundances for each outcome 
#Term
most_abundant_number <-20
topN =  most_abundant_number
TERMmost_abundant_taxa = sort(taxa_sums(TERMTop20rel), TRUE)[1:topN]
TERMmost_abundant_taxa

#For PTB
most_abundant_number <-20
topN =  most_abundant_number
PTBmost_abundant_taxa = sort(taxa_sums(PTBTop20rel), TRUE)[1:topN]
PTBmost_abundant_taxa 

#For Low risk
most_abundant_number <-20
topN =  most_abundant_number
lowmost_abundant_taxa = sort(taxa_sums(lowTop20rel), TRUE)[1:topN]
lowmost_abundant_taxa 

#For High risk
most_abundant_number <-20
topN =  most_abundant_number
highmost_abundant_taxa = sort(taxa_sums(highTop20rel), TRUE)[1:topN]
highmost_abundant_taxa 

#GroupI
most_abundant_number <-20
topN =  most_abundant_number
G1most_abundant_taxa = sort(taxa_sums(GIphyloseq), TRUE)[1:topN]
G1most_abundant_taxa 

#GroupII
most_abundant_number <-20
topN =  most_abundant_number
G2most_abundant_taxa = sort(taxa_sums(GIIphyloseq), TRUE)[1:topN]
G2most_abundant_taxa 

#GroupIII
most_abundant_number <-20
topN =  most_abundant_number
G3most_abundant_taxa = sort(taxa_sums(GIIIphyloseq), TRUE)[1:topN]
G3most_abundant_taxa 

#GroupIV
most_abundant_number <-20
topN =  most_abundant_number
G4most_abundant_taxa = sort(taxa_sums(GIVphyloseq), TRUE)[1:topN]
G4most_abundant_taxa

#Group5
most_abundant_number <-20
topN =  most_abundant_number
G5most_abundant_taxa = sort(taxa_sums(GVphyloseq), TRUE)[1:topN]
G5most_abundant_taxa

head(relmGPr)
#rename column 
names(relmGPr)[names(relmGPr) == 'OTU'] <- 'Species_name'
relmGPr$Species_name <- gsub("s__", " ", relmGPr$Species_name)
relmGPr$Species_name <- gsub("_", " ", relmGPr$Species_name)
head(relmGPr)

# edit values in column: 
mycol <- assignCols(unique(relmGPr$Species_name),unique(relmGPr$Species_name))

# Let's clean the rare taxa and rename them as 'others' 
library(microbiome)
rank_names(phylo_rel) # rank_names(phyloseqin.species)

RELtop20.species <- aggregate_rare(phylo_rel, level = "Species", detection = .1/100, prevalence = 5/100)

                                   
mycol <- assignCols(unique(tax_table(RELtop20.species)),unique(tax_table(RELtop20.species)))
head(RELtop20.species@otu_table, n=20)

RELtop20.species.melt <- psmelt(RELtop20.species)

levels(RELtop20.species.melt$unique)

#Modify this code for each unique phyloseq object
#For Term
library(microbiome)
rank_names(relTERMphyloseqin.species) # rank_names(phyloseqin.species)

relTERMtop20.species <- aggregate_rare(relTERMphyloseqin.species, 20, "Species")

mycolTERM <- assignCols(unique(tax_table(relTERMtop20.species)),unique(tax_table(relTERMtop20.species)))
head(relTERMtop20.species@otu_table, n=20)

relTERMtop20.species.melt <- psmelt(relTERMtop20.species)

levels(relTERMtop20.species.melt$unique)

#For PTB
library(microbiome)
rank_names(relPTBphyloseqin.species) # rank_names(phyloseqin.species)

relPTBtop20.species <- aggregate_rare(relPTBphyloseqin.species, 20, "Species")

mycolPTB <- assignCols(unique(tax_table(relPTBtop20.species)),unique(tax_table(relPTBtop20.species)))
head(relPTBtop20.species@otu_table, n=20)

relPTBtop20.species.melt <- psmelt(relPTBtop20.species)

levels(relPTBtop20.species.melt$unique)

#For G1
library(microbiome)
rank_names(GIphyloseq) # rank_names(phyloseqin.species)

Top20G1phyloseq <- aggregate_rare(GIphyloseq, 20, level = "Species", detection = 0.1/100, prevalence = 5/100)

mycolTERM <- assignCols(unique(tax_table(Top20G1phyloseq)),unique(tax_table(Top20G1phyloseq)))
head(Top20G1phyloseq@otu_table, n=20)

Top20G1phyloseq.melt <- psmelt(Top20G1phyloseq)

levels(Top20G1phyloseq.melt)

#For G2
library(microbiome)
rank_names(GIIphyloseq) # rank_names(phyloseqin.species)

Top20G2phyloseq <- aggregate_rare(GIIphyloseq, 20, level = "Species", detection = 0.1/100, prevalence = 5/100)

mycolTERM <- assignCols(unique(tax_table(Top20G2phyloseq)),unique(tax_table(Top20G2phyloseq)))
head(Top20G2phyloseq@otu_table, n=20)

Top20G2phyloseq.melt <- psmelt(Top20G2phyloseq)

levels(Top20G2phyloseq.melt)

#For G3
library(microbiome)
rank_names(GIIIphyloseq) # rank_names(phyloseqin.species)

Top20G3phyloseq <- aggregate_rare(GIIIphyloseq, 20, level = "Species", detection = 0.1/100, prevalence = 5/100)

mycolTERM <- assignCols(unique(tax_table(Top20G3phyloseq)),unique(tax_table(Top20G3phyloseq)))
head(Top20G3phyloseq@otu_table, n=20)

Top20G3phyloseq.melt <- psmelt(Top20G3phyloseq)

levels(Top20G3phyloseq.melt)

#For G4
library(microbiome)
rank_names(GIVphyloseq) # rank_names(phyloseqin.species)

Top20G4phyloseq <- aggregate_rare(GIVphyloseq, 20, level = "Species", detection = 0.1/100, prevalence = 5/100)

mycolTERM <- assignCols(unique(tax_table(Top20G4phyloseq)),unique(tax_table(Top20G4phyloseq)))
head(Top20G4phyloseq@otu_table, n=20)

Top20G4phyloseq.melt <- psmelt(Top20G4phyloseq)

levels(Top20G4phyloseq.melt)

#For G5
library(microbiome)
rank_names(Vphyloseq) # rank_names(phyloseqin.species)

Top20G5phyloseq <- aggregate_rare(GVphyloseq, 20, level = "Species", detection = 0.1/100, prevalence = 5/100)

mycolTERM <- assignCols(unique(tax_table(Top20G5phyloseq)),unique(tax_table(Top20G5phyloseq)))
head(Top20G5phyloseq@otu_table, n=20)

Top20G5phyloseq.melt <- psmelt(Top20G5phyloseq)

levels(Top20G5phyloseq.melt)


################################################################################
#                   Plot relative abundance stacked barplot                    #
################################################################################
#Change to better colours 
#manually checked samples A3319 (match) , A4753 (match) , A5703  (match) , A5215 (match) , A5732  (match)
#from the Species table retrieved from metaphlan using the commands 
#provided by the biobakery team after merging. 
c21 <- c("brown1" , "azure3",  "snow4",
         "yellow",
         "aquamarine", "darkorchid", "deeppink", 
         "yellowgreen", "darkgoldenrod1", 
         "mediumvioletred", "#000075", "#4363d8", "darkgreen", "rosybrown4", "plum2", "lightpink3",
         "chocolate1", "black",
         "darkolivegreen1", "darksalmon", 
         "Purple")
#plot all
ggplot(data=RELtop20.species.melt,aes(Sample, Abundance, fill = unique))+
  geom_bar(stat = "identity") +
  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + #, legend.position = "none") +
  scale_fill_manual(values = c21) +
  guides(fill = guide_legend(reverse = FALSE, keywidth = 1, keyheight = 1, ncol=1, title = "Species")) +
  facet_grid(~outcome,scales="free",  space = "free" )+
  xlab("")


############################################################################################
#         calculate alpha diversity of samples between groups and between outcomes         #
############################################################################################
#need to rarefy the absolute counts for this metric
phyloseqin.species.rarefied <- rarefy_even_depth(phyloseqin.species, 
      sample.size = min(sample_sums(phyloseqin.species)), 
      replace = TRUE, trimOTUs = TRUE, verbose = TRUE)

library(ggpubr) # to add stats compare means by outcome
p <- plot_richness(phyloseqin.species.rarefied, x = "outcome", measures=c("Chao1", "Shannon", "InvSimpson", "Observed"))+
  geom_boxplot()

p + stat_compare_means(label = "p.format") # observed is in term vs preterm, with PTB having higher more species than term
> plot_richness(phyloseqin.species.rarefied, x = "outcome", color= "outcome", measures=c("Chao1", "Shannon", "InvSimpson", "Observed"))+
  +     geom_boxplot()+ stat_compare_means(label = "p.format") 

#do the same for Groupings
p <- plot_richness(phyloseqin.species.rarefied, x = "Groupings", measures=c("Chao1", "Shannon", "InvSimpson", "Observed"))+
  geom_boxplot()

p + stat_compare_means(label = "p.format") # observed is in term vs preterm, with PTB having higher more species than term
plot_richness(phyloseqin.species.rarefied, x = "Groupings", color= "Groupings", measures=c("Chao1", "Shannon", "InvSimpson", "Observed"))+
  geom_boxplot()+ stat_compare_means(label = "p.format") 


############################################################
#           conduct PERMANOVA & beta diversity            #
###########################################################
bray <- phyloseq::distance(phylo_rel, method = "bray")
adonis(bray ~ outcome, data = MetaMetabolite)
#Adonis =  differences in the group means
#Yields ->
#Permutation: free
#Number of permutations: 999

#Terms added sequentially (first to last)

#Df SumsOfSqs MeanSqs F.Model     R2 Pr(>F)
#outcome    1     0.555 0.55498  1.5676 0.0177  0.161
#Residuals 87    30.801 0.35404         0.9823       
#Total     88    31.356                 1.0000  

beta <- betadisper(bray, MetaMetabolite$outcome)
permutest(beta)
#betadisper = difference in group homogeneities
#Yields ->
#Permutation test for homogeneity of multivariate dispersions
#Permutation: free - Number of permutations: 999

#Response: Distances
#Df  Sum Sq  Mean Sq      F N.Perm Pr(>F)
#Groups     1 0.05493 0.054934 2.0974    999  0.155
#Residuals 87 2.27867 0.026192   

#More in-depth diversity comparisons by outcome
bray <- phyloseq::distance(phyloseqin.species, method = "bray")
beta <- betadisper(bray, MetaMetabolite$outcome)
(mod.HSD <- TukeyHSD(beta))
plot(mod.HSD)

#More in-depth diversity comparisons by group
beta1 <- betadisper(bray, MetaMetabolite$Groupings)
(mod.HSD1 <- TukeyHSD(beta1))
mod.HSD1

boxplot(beta)
boxplot(beta1)

#conduct PCoA on relative abundances
set.seed(151)
phy_rel.ord <- ordinate(phylo_rel, "NMDS", "bray")

#Plot (set colors first)
c10 <- c("darkmagenta", "darkorange1", "gold","dodgerblue","lightpink",
         "saddlebrown","mediumpurple1","olivedrab2","gray56","black")

plot_ordination(phylo_rel, phy_rel.ord, type="samples", 
                color="Groupings") +  scale_color_manual(values = c10) +
  stat_ellipse(type = "norm", linetype = 2) +
  stat_ellipse(type = "t") + facet_wrap(~outcome)

#do the same for just groups not divided by outcome
plot_ordination(phylo_rel, phy_rel.ord, type="samples", 
                color="Groupings") +  scale_color_manual(values = c10) +
  stat_ellipse(type = "norm", linetype = 2) +
  stat_ellipse(type = "t") 

#make a dataframe of just sample names, GroupID and outcome
GroupbyOut <- select(MetaMetabolite, c("Groupings", "outcome"))

#Subset out Groups by Outcome
#13 samples
groupIterm <- subset(GroupbyOut, Groupings == "GroupI" &
               outcome == "TERM", select = c(Groupings, outcome))

#16 samples
groupIIterm <- subset(GroupbyOut, Groupings == "GroupII" & 
               outcome == "TERM", select = c(Groupings, outcome))

#12 samples
groupIIIterm <- subset(GroupbyOut, Groupings == "GroupIII" & 
                outcome == "TERM", select = c(Groupings, outcome))

#11 samples
groupIVterm <- subset(GroupbyOut, Groupings == "GroupIV" & 
               outcome == "TERM", select = c(Groupings, outcome))

#7 samples
groupVterm <- subset(GroupbyOut, Groupings == "GroupV" & 
               outcome == "TERM", select = c(Groupings, outcome))

#6 samples
groupIptb <- subset(GroupbyOut, Groupings == "GroupI" &
              outcome == "PTB", select = c(Groupings, outcome))

#6 samples
groupIIptb <- subset(GroupbyOut, Groupings == "GroupII" & 
              outcome == "PTB", select = c(Groupings, outcome))
#13 samples
groupIIIptb <- subset(GroupbyOut, Groupings == "GroupIII" & 
                outcome == "PTB", select = c(Groupings, outcome))
#3 samples
groupIVptb <- subset(GroupbyOut, Groupings == "GroupIV" & 
              outcome == "PTB", select = c(Groupings, outcome))
#2 samples
groupVptb <- subset(GroupbyOut, Groupings == "GroupV" & 
              outcome == "PTB", select = c(Groupings, outcome))

#30 samples for PTB
allgroupsPTB <- subset(GroupbyOut, outcome == "PTB", select = c(Groupings, outcome))
#59 samples for TERM
allgroupsTERM <- subset(GroupbyOut, outcome == "TERM", select = c(Groupings, outcome))

######################################################################################
##Generate correlation matrix, with correlation coefficients and p-values 
#(using this tutorial: https://towardsdatascience.com/customizable-correlation-plots-in-r-b1d2856a4b05)
#########################################################################################
##load tidyverse and knitr
#Find top 20 species by relative abundance - we've done this already at the top, but let's make them dataframes:
#all -> 
  most_abundant_taxa <- as.data.frame(most_abundant_taxa)

#make a list of just the names ->
  Top20REAL <- rownames(most_abundant_taxa)
  Top20REAL
  Top20REAL <- as.character(Top20REAL)
  
#subset these out of our summary.Percentage file, which is in the 
  #correct format for generating correaltions based on RelAbd 
Top20REAL <- select(summary.Percentage, c("Lactobacillus_iners", "Lactobacillus_crispatus",
"Gardnerella_vaginalis", "Lactobacillus_jensenii", "Atopobium_vaginae",
"Lactobacillus_gasseri", "BVAB1","Bifidobacterium_breve", "Bifidobacterium_dentium",  
"Lactobacillus_helveticus",
"Lactobacillus_johnsonii", "Prevotella_amnii", "Prevotella_bivia", 
"Escherichia_coli", "Mobiluncus_mulieris",
"Bifidobacterium_longum","Finegoldia_magna","Prevotella_timonensis",
"Prevotella_buccalis","Prevotella_disiens"))

#term ->
  TERMmost_abundant_taxa <- as.data.frame(TERMmost_abundant_taxa)
  TERMTop20REAL <- rownames(TERMmost_abundant_taxa)
  TERMTop20REAL
  TERMTop20REAL <- select(summary.Percentage, c("Lactobacillus_crispatus",
  "Lactobacillus_iners", "Gardnerella_vaginalis", "Lactobacillus_jensenii",  
  "Atopobium_vaginae", "Lactobacillus_gasseri", "BVAB1", "Lactobacillus_helveticus",
  "Bifidobacterium_dentium", "Prevotella_amnii", "Escherichia_coli", "Bifidobacterium_breve",   
  "Mobiluncus_mulieris", "Bifidobacterium_longum", "Prevotella_bivia", "Finegoldia_magna",        
  "Prevotella_timonensis", "Prevotella_buccalis", "Prevotella_disiens", "Mobiluncus_curtisii"))   

#PTB ->
  PTBmost_abundant_taxa <- as.data.frame(PTBmost_abundant_taxa)
  PTBTop20REAL <- rownames(PTBmost_abundant_taxa)
  PTBTop20REAL
  PTBTop20REAL <- select(summary.Percentage, c("Lactobacillus_iners", "Lactobacillus_crispatus", 
  "Gardnerella_vaginalis", "Lactobacillus_gasseri", "Lactobacillus_jensenii", "Bifidobacterium_breve",
  "Bifidobacterium_dentium", "Lactobacillus_johnsonii", "BVAB1", "Prevotella_bivia", "Atopobium_vaginae",
  "Ruminococcus_lactaris", "Bifidobacterium_longum", "Prevotella_amnii", "Streptococcus_agalactiae", 
  "Prevotella_timonensis", "Porphyromonas_uenonis", "Mobiluncus_mulieris",
  "Prevotella_buccalis", "Mageeibacillus_indolicus"))
  
#G1
  G1most_abundant_taxa <- as.data.frame(G1most_abundant_taxa)
  G1Top20REAL <- rownames(G1most_abundant_taxa)
  G1Top20REAL
  G1Top20REAL <- select(summary.Percentage, c("Gardnerella_vaginalis", "Atopobium_vaginae", "Lactobacillus_iners",
                                               "BVAB1", "Prevotella_bivia", "Mobiluncus_mulieris",         
"Prevotella_amnii", "Prevotella_timonensis", "Lactobacillus_gasseri", "Prevotella_buccalis", 
"Mageeibacillus_indolicus", "Porphyromonas_uenonis", "Peptoniphilus_harei", "Ruminococcus_lactaris", 
"Sneathia_amnii", "Prevotella_disiens", "Sneathia_sanguinegens","Peptoniphilus_lacrimalis",     
"Peptostreptococcus_anaerobius", "Mobiluncus_curtisii"))
  
#G2
  G2most_abundant_taxa <- as.data.frame(G2most_abundant_taxa)
  G2Top20REAL <- rownames(G2most_abundant_taxa)
  G2Top20REAL
  G2Top20REAL <- select(summary.Percentage, c("Lactobacillus_crispatus", "Lactobacillus_iners", 
                                             "Lactobacillus_jensenii", "Lactobacillus_gasseri", 
 "Gardnerella_vaginalis", "Atopobium_vaginae", "Lactobacillus_johnsonii", "Lactobacillus_kefiranofaciens",
 "Enterococcus_faecalis", "Lactobacillus_coleohominis", "Prevotella_bivia", "Lactobacillus_helveticus",     
"Lactobacillus_ultunensis", "Streptococcus_anginosus", "Bifidobacterium_breve", "Streptococcus_agalactiae",
"Escherichia_coli", "Burkholderia_mallei", "BVAB1", "Lactobacillus_acidophilus"))  
  
#G3
  G3most_abundant_taxa <- as.data.frame(G3most_abundant_taxa)
  G3Top20REAL <- rownames(G3most_abundant_taxa)
  G3Top20REAL
  G3Top20REAL <- select(summary.Percentage, c("Lactobacillus_iners", "Lactobacillus_gasseri", "Lactobacillus_jensenii",   
"Gardnerella_vaginalis", "BVAB1", "Lactobacillus_crispatus", "Atopobium_vaginae", "Mobiluncus_mulieris", 
"Mageeibacillus_indolicus", "Prevotella_bivia","Anaerococcus_hydrogenalis", "Prevotella_amnii",
"Burkholderia_mallei", "Staphylococcus_aureus", "Streptococcus_agalactiae", "Finegoldia_magna", 
"Enterococcus_faecalis","Bifidobacterium_breve", "Lactobacillus_johnsonii","Enterococcus_faecium"))
  
#G4  
  G4most_abundant_taxa <- as.data.frame(G4most_abundant_taxa)
  G4Top20REAL <- rownames(G4most_abundant_taxa)
  G4Top20REAL
  G4Top20REAL <- select(summary.Percentage, c("Lactobacillus_jensenii","Lactobacillus_iners", "Lactobacillus_helveticus",      
"Lactobacillus_johnsonii", "Lactobacillus_gasseri","Gardnerella_vaginalis", "Lactobacillus_crispatus", 
"Bifidobacterium_longum", "Atopobium_vaginae", "Prevotella_timonensis", "Lactobacillus_ultunensis",
"Lactobacillus_fermentum", "BVAB1", "Propionimicrobium_lymphophilum", "Prevotella_buccalis",           
"Peptoniphilus_lacrimalis","Clostridiales_Family", "Lactobacillus_kefiranofaciens", "Lactobacillus_coleohominis","Bifidobacterium_breve")) 

#G5
  G5most_abundant_taxa <- as.data.frame(G5most_abundant_taxa)
  G5Top20REAL <- rownames(G5most_abundant_taxa)
  G5Top20REAL
  G5Top20REAL <- select(summary.Percentage, c("Bifidobacterium_breve", "Atopobium_vaginae", "Bifidobacterium_dentium", 
"Lactobacillus_iners", "BVAB1", "Gardnerella_vaginalis", "Escherichia_coli", "Prevotella_amnii", "Bifidobacterium_longum",    
"Lactobacillus_crispatus", "Finegoldia_magna", "Prevotella_bivia", "Prevotella_buccalis", "Staphylococcus_lugdunensis",
"Streptococcus_agalactiae", "Prevotella_disiens", "Mobiluncus_curtisii", "Prevotella_timonensis",     
"Actinomyces_neuii", "Burkholderia_mallei"))  
  
##Create dataframes of the correlation matrix with species as row names
  TOP20_Cor <- correlate(Top20REAL, method = "spearman", diagonal = 1)
  row.names(TOP20_Cor) <- TOP20_Cor$term
  TOP20_Cor <- as.data.frame(TOP20_Cor)
  TOP20_Cor <- select(TOP20_Cor, -c(term))
  
  PTBTop20_Cor <- correlate(PTBTop20REAL, method = "spearman", diagonal = 1)
  row.names(PTBTop20_Cor) <- PTBTop20_Cor$term
  PTBTop20_Cor <- select(PTBTop20_Cor, -c(term))
  
  TermTop20_Cor <- correlate(TERMTop20REAL, method = "spearman", diagonal = 1)
  row.names(TermTop20_Cor) <- TermTop20_Cor$term
  TermTop20_Cor <- select(TermTop20_Cor, -c(term))
  
  G1Top20_Cor <- correlate(G1Top20REAL, method = "spearman", diagonal = 1)
  row.names(G1Top20_Cor) <- G1Top20_Cor$term
  G1Top20_Cor <- select(G1Top20_Cor, -c(term))

  G2Top20_Cor <- correlate(G2Top20REAL, method = "spearman", diagonal = 1)
  row.names(G2Top20_Cor) <- G2Top20_Cor$term
  G2Top20_Cor <- select(G2Top20_Cor, -c(term))
  
  G3Top20_Cor <- correlate(G3Top20REAL, method = "spearman", diagonal = 1)
  row.names(G3Top20_Cor) <- G3Top20_Cor$term
  G3Top20_Cor <- select(G3Top20_Cor, -c(term))
  
  G4Top20_Cor <- correlate(G4Top20REAL, method = "spearman", diagonal = 1)
  row.names(G4Top20_Cor) <- G4Top20_Cor$term
  G4Top20_Cor <- select(G4Top20_Cor, -c(term))
  
  G5Top20_Cor <- correlate(G5Top20REAL, method = "spearman", diagonal = 1)
  row.names(G5Top20_Cor) <- G5Top20_Cor$term
  G5Top20_Cor <- select(G5Top20_Cor, -c(term))
  
#write a function that will compute a corresponding matrix of p-values so we can show these on the plot
  # mat : is a matrix of data
  # ... : further arguments to pass to the native R cor.test function
  cor.mtest <- function(mat, ...) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat<- matrix(NA, n, n)
    diag(p.mat) <- 0
    for (i in 1:(n - 1)) {
      for (j in (i + 1):n) {
        tmp <- cor.test(mat[, i], mat[, j], ...)
        p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
      }
    }
    colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
    p.mat
  }
#matrix of the p-value of the correlation
  Top20pValuesMat <- cor.mtest(TOP20_COR)
  PTBTop20pValuesMat <- cor.mtest(PTBTop20_Cor)
  TermTop20pValuesMat <- cor.mtest(TermTop20_Cor)
  
  G1Top20pValuesMat <- cor.mtest(G1Top20_Cor)
  G2Top20pValuesMat <- cor.mtest(G2Top20_Cor)
  G3Top20pValuesMat <- cor.mtest(G3Top20_Cor)
  G4Top20pValuesMat <- cor.mtest(G4Top20_Cor)
  G5Top20pValuesMat <- cor.mtest(G5Top20_Cor)
  
#unlist our Cor_Mat so R will not perceive it as a list
  TOP20_CorMatrix <- sapply(TOP20_Cor, as.matrix)
  PTBTOP20_CorMatrix <- sapply(PTBTop20_Cor, as.matrix)
  TERMTOP20_CorMatrix <- sapply(TermTop20_Cor, as.matrix)
  G1TOP20_CorMatrix <- sapply(G1Top20_Cor, as.matrix)
  G2TOP20_CorMatrix <- sapply(G2Top20_Cor, as.matrix)
  G3TOP20_CorMatrix <- sapply(G3Top20_Cor, as.matrix)
  G4TOP20_CorMatrix <- sapply(G4Top20_Cor, as.matrix)
  G5TOP20_CorMatrix <- sapply(G5Top20_Cor, as.matrix)

  ##Make sure your correlation matrix and pvalue correlation matrix have the same row and column names!   
  rownames(TOP20_CorMatrix) <- rownames(Top20pValuesMat)
  rownames(PTBTOP20_CorMatrix) <- rownames(PTBTop20pValuesMat)
  rownames(TERMTOP20_CorMatrix) <- rownames(TermTop20pValuesMat)
  rownames(G1TOP20_CorMatrix) <- rownames(G1Top20pValuesMat)
  rownames(G2TOP20_CorMatrix) <- rownames(G2Top20pValuesMat)
  rownames(G3TOP20_CorMatrix) <- rownames(G3Top20pValuesMat)
  rownames(G4TOP20_CorMatrix) <- rownames(G4Top20pValuesMat)
  rownames(G5TOP20_CorMatrix) <- rownames(G5Top20pValuesMat)
  

#plot this customized correlogram
#set heatmap colors to use
col <- colorRampPalette(c("#2a4858", "#255566", "#1c6373", "#0b717e", "#007f86", "#008d8c", "#009c8f", "#23aa8f", "#3fb78d", "#5bc489", "#77d183", "#95dd7d", "#b5e877", "#d7f171", "#fafa6e"))
    corrplot(PTBTOP20_CorMatrix, method="color",  col=col(200), 
         is.corr = TRUE,
         type="full", order="FPC", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
         # Combine with significance
         p.mat = PTBTop20pValuesMat, sig.level = 0.01, insig = "blank", 
         # show correlation coefficient on the principal diagonal
         diag=TRUE,
         number.cex = .6, number.digits = 2 
         #set text size, font, and number of digits after the decimal for sig numbers
          )
    
    corrplot(TERMTOP20_CorMatrix, method="color",  col=col(200), 
             is.corr = TRUE,
             type="full", order="FPC", 
             addCoef.col = "black", # Add coefficient of correlation
             tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
             # Combine with significance
             p.mat = TermTop20pValuesMat, sig.level = 0.01, insig = "blank", 
             # show correlation coefficient on the principal diagonal
             diag=TRUE,
             number.cex = .6, number.digits = 2 
             #set text size, font, and number of digits after the decimal for sig numbers
    )
    
    corrplot(G1TOP20_CorMatrix, method="color",  col=col(200), 
             is.corr = TRUE,
             type="full", order="FPC", 
             addCoef.col = "black", # Add coefficient of correlation
             tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
             # Combine with significance
             p.mat = G1Top20pValuesMat, sig.level = 0.01, insig = "blank", 
             # show correlation coefficient on the principal diagonal
             diag=TRUE,
             number.cex = .6, number.digits = 2 
             #set text size, font, and number of digits after the decimal for sig numbers
    )

    corrplot(G2TOP20_CorMatrix, method="color",  col=col(200), 
             is.corr = TRUE,
             type="full", order="FPC", 
             addCoef.col = "black", # Add coefficient of correlation
             tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
             # Combine with significance
             p.mat = G2Top20pValuesMat, sig.level = 0.01, insig = "blank", 
             # show correlation coefficient on the principal diagonal
             diag=TRUE,
             number.cex = .6, number.digits = 2 
             #set text size, font, and number of digits after the decimal for sig numbers
    )
    
    corrplot(G3TOP20_CorMatrix, method="color",  col=col(200), 
             is.corr = TRUE,
             type="full", order="FPC", 
             addCoef.col = "black", # Add coefficient of correlation
             tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
             # Combine with significance
             p.mat = G3Top20pValuesMat, sig.level = 0.01, insig = "blank", 
             # show correlation coefficient on the principal diagonal
             diag=TRUE,
             number.cex = .6, number.digits = 2 
             #set text size, font, and number of digits after the decimal for sig numbers
    )
    
    corrplot(G4TOP20_CorMatrix, method="color",  col=col(200), 
             is.corr = TRUE,
             type="full", order="FPC", 
             addCoef.col = "black", # Add coefficient of correlation
             tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
             # Combine with significance
             p.mat = G4Top20pValuesMat, sig.level = 0.01, insig = "blank", 
             # show correlation coefficient on the principal diagonal
             diag=TRUE,
             number.cex = .6, number.digits = 2 
             #set text size, font, and number of digits after the decimal for sig numbers
    )
    
    corrplot(G5TOP20_CorMatrix, method="color",  col=col(200), 
             is.corr = TRUE,
             type="full", order="FPC", 
             addCoef.col = "black", # Add coefficient of correlation
             tl.col="black", tl.cex = .8, tl.srt=45, #Text label color, size rotation
             # Combine with significance
             p.mat = G5Top20pValuesMat, sig.level = 0.01, insig = "blank", 
             # show correlation coefficient on the principal diagonal
             diag=TRUE,
             number.cex = .6, number.digits = 2 
             #set text size, font, and number of digits after the decimal for sig numbers
    )
    
##################################################################################
#                     Create Networks using MicroEco                             #
##################################################################################
#use tutoral here: https://chiliubio.github.io/microeco_tutorial/basic-class.html#microtable-class
#load library
    library(microeco)
    
# use pipe operator in magrittr package
    library(magrittr)
    
# make the plotting background same with the tutorial
    library(ggplot2)
    theme_set(theme_bw())
    
# set.seed is used to fix the random number generation to make the results repeatable
    set.seed(123)

#create micreco table    
    data(virgo.tax)
    data(virgo.transpose)
    data(MetaMetaboliteFINAL)
    microeco <- microtable$new(sample_data = MetaMetaboliteFINAL, 
              otu_table = virgo.transpose, tax_table = virgo.tax)
    
  t1 <- trans_network$new(dataset = micreco, cal_cor = "base", taxa_level = "OTU", 
                          filter_thres = 0.0001, cor_method = "spearman")
  
# construct network; require igraph package    
    t1$cal_network(p_thres = 0.01, COR_optimization = TRUE)
    # return t1$res_network

# use optimized coefficient threshold to contruct network
    t1$cal_network(p_thres = 0.01, COR_cut = 0.79)
    
# add modules in the network
    t1$cal_module()

